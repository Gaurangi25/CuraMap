.env

What does dotenv.config() do?
It reads secret settings from your .env file and makes them usable in your code

You have a file called .env:

MONGO_URI=your_secret_database_url

Then in your code:
import dotenv from 'dotenv';
dotenv.config(); // This loads the .env file

console.log(process.env.MONGO_URI); // Now it works

_____________________________________________________

Mongoose 

useNewUrlParser: true
Tells Mongoose to use the modern, more reliable MongoDB URL parser.
Required for newer-style URLs like this:
mongodb+srv://...

useUnifiedTopology: true
Enables the new MongoDB driver engine for better server discovery and monitoring.
Prevents a lot of older bugs and warnings.

Both are valid
1. mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

2. mongoose.connect(process.env.MONGO_URI);
_____________________________________________________

express.router()

when you want to organize routes, instead of putting everything inside app, you create small helpers using:

const router = express.Router(); // a mini app just for hospitals

router.get("/")       ‚Üí List all hospitals
router.post("/")      ‚Üí Add a new hospital

app.use("/api/hospitals", router);

____________________________________________________

<React.StrictMode> 

Warns about unsafe lifecycle methods (used in class components ‚Äî you're likely not using them yet).

Highlights potential side-effect bugs in useEffect, like:

Fetching data twice

Accidentally causing re-renders

Checks for deprecated APIs

Runs some functions twice on purpose in development

Not in production

Just to help you find accidental bugs early

____________________________________________________

JWT TOKENS

const token = jwt.sign(
  { id: user._id, email: user.email },
  process.env.JWT_SECRET || "defaultsecret",
  { expiresIn: "1h" }
);
This line is creating a token (kind of like a digital ID card) for the logged-in user.

1. This function creates a token.

It takes 3 things:
jwt.sign(payload, secretKey, options)

  payload ‚Üí info you want to store in the token.You're storing who the user is (their ID and email).This will be useful to identify them later when they use this token.

  secretKey ‚Üí used to lock (sign) the token.
  process.env.JWT_SECRET || "defaultsecret"
  It‚Äôs like a secret password used to sign the token.
  Your backend will also use this later to verify that the token wasn‚Äôt changed or faked.

  expiresIn ‚Üí token will expire in 1 hour
  { expiresIn: "1h" }
  This means the user‚Äôs login session will automatically expire in 1 hour ‚Äî for security.

____________________________________________________

Google Map API

<GoogleMap
  zoom={12}
/>

zoom={12} ‚Äî What It Means
The zoom prop controls how close the map is when it loads.

üìä Zoom Levels Cheat Sheet:
Zoom Level	What You See	Typical Use
1‚Äì3	Entire world / continents	Global view
5‚Äì6	Large countries	Country view
10‚Äì12	City level	üèôÔ∏è City map (like Delhi, Mumbai)
15	Streets and local areas	Neighborhood view
18‚Äì20	Buildings, shops, very detailed	Floorplans, pinpoint locations

‚úÖ So zoom={12} means:
"Show the city level view, where roads and local areas are visible, but not ultra-detailed buildings."

mapContainerStyle ‚Üí tells it how big to draw
center ‚Üí where the map starts
zoom={12} ‚Üí how zoomed in (1=world, 20=building)
<Marker /> ‚Üí puts a pin on the map

Using InfoWindow ->  clicking a marker should show hospital name + address in a pop-up.


onCloseClick={() => setSelectedId(null)}
When the user clicks the ‚ùå (close button) on the InfoWindow (the popup),

‚Üí We run this function:
() => setSelectedId(null)

It removes the current selectedId
Which means ‚Üí no marker is active now
So the InfoWindow disappears from the map
____________________________________________________

AXIOS AND FETCH 

You use Axios when you need to make HTTP requests (GET, POST, PATCH, DELETE, etc.) from your frontend (React) or backend (Node.js) to interact with a server or an API ‚Äî in a more powerful and cleaner way than the native fetch().

1. When you need cleaner, shorter syntax
// With fetch
fetch("/api/data")
  .then(res => res.json())
  .then(data => console.log(data));

// With axios
axios.get("/api/data").then(res => console.log(res.data));

____________________________________________________

useauth()

const { user, login, logout } = useAuth();
Now you can:

user ‚Üí Get the current logged-in user's data (like name/email)
login(token, user) ‚Üí Save token + user info to context and localStorage
logout() ‚Üí Clear everything (token + user) from context/localStorage

____________________________________________________

üîê AuthContext.jsx ‚Äî What It Does:
This file creates a global authentication system using React Context.
It helps the whole app know:

Who is logged in
What their token is
How to log in / log out

üîß Core Functions Inside:
login(token, user): saves user + token to state and localStorage
logout(): clears user and token from state and storage
useAuth(): lets any component easily access auth data

____________________________________________________

PrivateRoute.jsx

till AuthContext.jsx -> anyone can access mhy dashboard even if they are not logged in using localhost:3000/dashboard

so PrivateRoute.jsx acts as a security guard which until JWT token is not given wont let u enter 
____________________________________________________

useAuth()

useAuth() is a shortcut that gives you access to login info, user data, and auth functions (like login() and logout()) anywhere in your app.

____________________________________________________

The Google Maps JS API supports: geolocation centering, custom markers, InfoWindows, marker clustering, directions/routing, and so on.